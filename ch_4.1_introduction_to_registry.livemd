# Introduction to Registry

## What is Registry?

From the official documentation

> A local, decentralized and scalable key-value process storage. It allows developers to lookup one or more processes with a given key.

Lets go through some main points about registries...

* The Registry in Elixir is a process store that stores **key-value** pairs, allowing us to register a process under a specific name.
* There are two types of Registries: **unique and duplicate**. A unique Registry only permits one process to be registered under a given name, while a duplicate Registry permits multiple processes to be registered under the same name.
* Each entry in the Registry is associated with the process that registered it. If the process crashes, the Registry automatically removes the keys associated with that process.
* The Registry **compares keys using the match operation (===/2)**.
* **Partitioning** the Registry is possible, allowing for more scalable behavior in highly concurrent environments with thousands or millions of entries.
* The Registry **uses ETS tables** to store data under the hood.
* Registries can **only be run locally** and are not available in a distributed Elixir setup.

## When to use Registry?

Some common use cases of registry are...

* Using the `:via` option to naming a process using Registry
* The Registry features a dispatch mechanism that developers can use to implement custom dispatch logic when a caller initiates a request.
* Registries can be employed to create a local, non-distributed PubSub that is highly scalable by leveraging the `dispatch/3` function.

# Immutability and memory management

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="ch_0.0_start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="ch_1.1_concurrency_in_elixir.livemd">Concurrency in elixir</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="ch_2.1_process_internals.livemd">Process internals</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Immutability in elixir

In Elixir, variables function as labels that refer to specific values. These values are immutable, meaning they cannot be changed. However, the label or variable can be reassigned to a different value. This provides the flexibility to bind the same value to multiple labels or variables.

In Erlang, it is not possible to reassign or rebind a variable. Attempting to do so will result in an error, as demonstrated in the following code:

```
X = 5,
X = X * 10.  % throws an exception error: no match of right hand side value 50
```

The error in the Erlang code occurs because the variable X is initially assigned to the value of 5, but then an attempt is made to reassign it to a new value (i.e. X * 10). Since variables in Erlang are immutable, this operation is not allowed and the code will fail to compile.

On the other hand, Elixir allows for rebinding of values, which makes the same code valid in Elixir. This is because in Erlang, the = operator functions as a match operator rather than an assignment operator. Therefore, in the Erlang code X = X * 10, the left-hand side of the match (X) is already bound to the value of 5, and trying to match it with the right-hand side (X * 10) which evaluates to 50, results in a mismatch.

In Elixir, the ^ (pin) operator can be used to force a match, while the assignment operation uses the regular = operator. For example:

```
iex(1)> x = 5
5
iex(2)> x = x * 10  # Assignment
50
iex(3)> ^x = x * 10 # Matching
** (MatchError) no match of right hand side value: 500
    (stdlib 4.0.1) erl_eval.erl:496: :erl_eval.expr/6
    iex:3: (file)
```

In Elixir, any input passed into a function to be transformed creates a new value without modifying the original value. This allows for safe concurrent access to the same data by multiple processes. Since there is no shared memory that is getting mutated by multiple processes, concurrency is easier to manage. Any transformation on the original data will result in new data being created.

## Example of immutability & closures in elixir

```elixir
list = [1, 2, 3, 4]

# Returns a new list
Enum.filter(list, fn num -> num > 2 end)

# [1, 2, 3, 4] Original list remains unchanged
list
```

```elixir
x = 1

# An anonymous function
anon = fn ->
  # Closure captures the value of x
  IO.puts(x)
  x = 0
end

# Outputs 1
anon.()

# Outputs 1
IO.puts(x)

x = 5

# Outputs 1
anon.()
```

## Persistent Datastructures

At this point you might be wandering that performing a full copy of the entire data whenever something changes would be an expensive and slow operation and lead to a high performance overhead.

To solve this problem there is a class of datastructures known as **persistent data structures**.

Persistent data structures are data structures that allow for the efficient storage and retrieval of data even after multiple modifications or updates have been made. These data structures preserve the previous versions of data and allow for efficient access to those versions.

A persistent data structure maintains the previous versions of data by using a technique known as structural sharing. Structural sharing allows the data structure to share the unchanged parts of its structure across multiple versions of the data, rather than copying the entire structure each time a modification is made. This sharing of unchanged structure makes persistent data structures efficient in both time and space.

Persistent data structures are widely used in functional programming languages, where immutability is a core concept.

Under the hood, the BEAM leverages persistent data structures in order to provide
immutability as a first-class citizen while not having to copy the entire data structure
any time something changes (with the exceptions of when data is passed between
processes or when data is extracted from native data stores like ETS).

For example, Elixir lists are linked lists, and a linked list (Tree with one branch)

```
Elixir: list = [1, 2, 3, 4]
Tree:   1 -> 2 -> 3 -> 4
Every time you prepend an element to a list, it will share its tail:

Elixir: [0|list]
Tree:   0 -> (1 -> 2 -> 3 -> 4)
```

## High level overview of garbage collection in elixir

In Erlang, each process has its own private heap and runs a **generational copying garbage collection**. The heap is divided into two segments - young and old generations - based on the likelihood of an object becoming garbage in the short term.

Newly allocated data is stored in the young generation, while data that has survived a certain number of garbage collection cycles is stored in the old generation. In addition, Erlang also employs a reference counting garbage collection for the global shared heap.

**Shared Heap GC**

In Erlang, the garbage collector for the shared heap uses a reference counting approach. Objects in the shared heap are assigned a reference counter, which counts the number of references to the object held by other objects (ProcBin) stored in the private heap of Erlang processes. When an object's reference counter reaches zero, it is deemed inaccessible and will be destroyed.

## Resources

* https://stackoverflow.com/questions/30203227/does-elixir-have-persistent-data-structures-similar-to-clojure

* https://elixirpatterns.dev/

* https://gist.github.com/josevalim/ce2f5871a96b6cbcf2c1

* https://elixirforum.com/t/how-would-you-explain-elixir-immutability/47323/11

* https://hamidreza-s.github.io/erlang%20garbage%20collection%20memory%20layout%20soft%20realtime/2015/08/24/erlang-garbage-collection-details-and-why-it-matters.html

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="ch_0.0_start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="ch_1.1_concurrency_in_elixir.livemd">Concurrency in elixir</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="ch_2.1_process_internals.livemd">Process internals</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
